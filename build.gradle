import groovy.json.JsonSlurper

plugins {
  id 'fabric-loom' version "${loom_version}"
  id 'java'
  id 'maven-publish'
  id 'com.diffplug.spotless' version '6.25.0'
}

group = 'dev.mincore'
version = '0.1.0'

java {
  toolchain { languageVersion = JavaLanguageVersion.of(21) }
  withJavadocJar()
  withSourcesJar()
}

repositories {
  mavenCentral()
  maven { url = "https://maven.fabricmc.net/" }
}

dependencies {
  minecraft "com.mojang:minecraft:${minecraft_version}"
  mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
  modImplementation "net.fabricmc:fabric-loader:${loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

  // Driver is provided externally on disk; compileOnly is fine for IDEs.
  compileOnly "org.mariadb.jdbc:mariadb-java-client:3.4.1"

  // Bundle Hikari inside the mod jar.
  include(implementation("com.zaxxer:HikariCP:5.1.0"))

  // Optional timezone auto-detect (GeoIP lookup when enabled).
  include(implementation("com.maxmind.geoip2:geoip2:4.1.0"))

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

// Only the main sourceset (the JDBC loader now lives in main)
sourceSets {
  main {
    java.srcDirs = ["src/main/java"]
    resources.srcDirs = ["src/main/resources"]
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.release = 21
}

spotless {
  java {
    googleJavaFormat()
    target "src/**/*.java"
    removeUnusedImports()
    indentWithSpaces()
    endWithNewline()
    licenseHeader '/* MinCore © 2025 — MIT */\n'
  }
}

tasks.named('test') {
  useJUnitPlatform()
}

def countPlaceholders = { String value ->
  def matcher = value =~ /%s/
  int total = 0
  while (matcher.find()) {
    total++
  }
  total
}

tasks.register('validateI18n') {
  group = 'verification'
  description = 'Validates localization files for missing keys and placeholder mismatches.'

  def langDir = file('src/main/resources/assets/mincore/lang')
  inputs.dir(langDir)

  doLast {
    if (!langDir.exists()) {
      throw new GradleException("Localization directory not found: ${langDir}")
    }

    File baseFile = new File(langDir, 'en_us.json')
    if (!baseFile.exists()) {
      throw new GradleException('Base locale en_us.json is missing')
    }

    def slurper = new JsonSlurper()
    def base = slurper.parse(baseFile)
    if (!(base instanceof Map)) {
      throw new GradleException("Base locale must be a JSON object")
    }

    Map<String, Integer> placeholders = [:]
    base.each { key, value ->
      if (!(value instanceof String)) {
        throw new GradleException("Value for ${key} in ${baseFile.name} must be a string")
      }
      placeholders[key] = countPlaceholders(value as String)
    }

    langDir.listFiles()?.findAll { it.name.endsWith('.json') && it.name != 'en_us.json' }?.each { File localeFile ->
      def locale = slurper.parse(localeFile)
      if (!(locale instanceof Map)) {
        throw new GradleException("${localeFile.name} must be a JSON object")
      }

      placeholders.each { key, expectedCount ->
        if (!locale.containsKey(key)) {
          throw new GradleException("${localeFile.name} is missing key ${key}")
        }
        def value = locale[key]
        if (!(value instanceof String)) {
          throw new GradleException("${localeFile.name} key ${key} must be a string")
        }
        int actual = countPlaceholders(value as String)
        if (actual != expectedCount) {
          throw new GradleException("${localeFile.name} key ${key} placeholder mismatch (expected ${expectedCount}, found ${actual})")
        }
      }

      locale.keySet().each { key ->
        if (!placeholders.containsKey(key)) {
          throw new GradleException("${localeFile.name} has extra key ${key}")
        }
      }
    }
  }
}

tasks.named('check') {
  dependsOn 'validateI18n'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
